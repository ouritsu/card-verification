{"version":3,"sources":["js/cardsData.js","js/checkCardNumber.js"],"names":["cardsData","name","lengths","beginings","checkCardNumber","inputUserNumber","length","parseInt","Error","inputValueToCalculation","prepareInputValueToCalculation","isValidLuhnAlgorithm","checkLuhnAlgorithm","cardCompany","checkCardCompany","invalidInputValue","userNumberArrayDigitals","match","reverse","sum","forEach","number","index","digit","calculateValue","calculateValueGreaterThan10","value","separateDigits","String","split","reduce","nextDigit","cardNumber","finalResult","Object","keys","company","lengthCondition","checkLength","beginingCondition","checkBegining","result","firstNumbers","startsWith"],"mappings":"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","file":"checkCardNumber.5f66dae4.js","sourceRoot":"..","sourcesContent":["const cardsData = {\r\n  'visa': {\r\n    name: 'Visa',\r\n    lengths: [13, 16],\r\n    beginings: [4],\r\n  },\r\n  'masterCard': {\r\n    name: 'Master Card',\r\n    lengths: [16],\r\n    beginings: [22, 51, 52, 53, 54, 55]\r\n  },\r\n  'americanExpress': {\r\n    name: 'American Express',\r\n    lengths: [15],\r\n    beginings: [34, 37]\r\n  },\r\n  'discover': {\r\n    name: 'Discover',\r\n    lengths: [16],\r\n    beginings: [60]\r\n  },\r\n  'dinersClub': {\r\n    name: 'Diners Club',\r\n    lengths: [14],\r\n    beginings: [3]\r\n  },\r\n  'jcb': {\r\n    name: 'JCB',\r\n    lengths: [16],\r\n    beginings: [35]\r\n  },\r\n}\r\n\r\nexport {\r\n  cardsData\r\n};","import {\r\n  cardsData\r\n} from \"./cardsData\"\r\n\r\nconst checkCardNumber = (inputUserNumber) => {\r\n  if (inputUserNumber.length !== 0 && !parseInt(inputUserNumber)) throw new Error('use only digitals!');\r\n  if (inputUserNumber === '') throw new Error('empty input');\r\n\r\n  const inputValueToCalculation = prepareInputValueToCalculation(inputUserNumber);\r\n  const isValidLuhnAlgorithm = checkLuhnAlgorithm(inputValueToCalculation);\r\n  const cardCompany = checkCardCompany(inputUserNumber);\r\n  if (isValidLuhnAlgorithm && cardCompany) {\r\n    return cardsData[cardCompany].name;\r\n  } else {\r\n    invalidInputValue();\r\n  }\r\n}\r\n\r\nfunction prepareInputValueToCalculation(inputUserNumber) {\r\n  const userNumberArrayDigitals = inputUserNumber.match(/[0-9]/g);\r\n  return userNumberArrayDigitals.reverse();\r\n}\r\n\r\nfunction checkLuhnAlgorithm(inputValueToCalculation) {\r\n  let sum = 0;\r\n\r\n  inputValueToCalculation.forEach((number, index) => {\r\n    const digit = parseInt(number);\r\n    if (index % 2) {\r\n      let calculateValue = digit * 2\r\n      sum += calculateValue < 10 ? calculateValue : calculateValueGreaterThan10(calculateValue)\r\n    } else {\r\n      sum += digit;\r\n    }\r\n  })\r\n  return sum % 10 === 0 ? true : false;\r\n}\r\n\r\nfunction calculateValueGreaterThan10(value) {\r\n  const separateDigits = String(value).split('');\r\n  return separateDigits.reduce((sum, nextDigit) => sum + parseInt(nextDigit), 0);\r\n}\r\n\r\nfunction invalidInputValue() {\r\n  throw new Error('invalid card number!');\r\n}\r\n\r\nfunction checkCardCompany(cardNumber) {\r\n  let finalResult = \"\";\r\n  for (const company of Object.keys(cardsData)) {\r\n    const lengthCondition = checkLength(cardNumber, company);\r\n    const beginingCondition = checkBegining(cardNumber, company);\r\n    if (lengthCondition && beginingCondition) {\r\n      finalResult = company;\r\n    }\r\n  }\r\n  return finalResult;\r\n}\r\n\r\nfunction checkLength(cardNumber, company) {\r\n  let result = false;\r\n\r\n  for (const length of cardsData[company].lengths) {\r\n    if (cardNumber.length === length) {\r\n      result = true;\r\n      break;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction checkBegining(cardNumber, company) {\r\n  let result = false;\r\n\r\n  for (const firstNumbers of cardsData[company].beginings) {\r\n    if (cardNumber.startsWith(firstNumbers)) {\r\n      result = true;\r\n      break;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nexport {\r\n  checkCardNumber\r\n};"]}